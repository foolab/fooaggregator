<?php // -*-php-*-

// todo:
// multiple download methods.

/**
 * Implementation of hook_menu()
 */
function fooaggregator_menu() {
  $items = array();

  $items['admin/content/fooaggregator'] = array(
         'page callback' => 'fooaggregator_admin',
	 'access arguments' => array('administer aggregator'),
	 'title' => 'News aggregator',
	 'description' => 'Configure which content your site aggregates from other sites and how often it polls them.',
	 'type' => MENU_NORMAL_ITEM,
	 );

  $items['admin/content/fooaggregator/list'] = array(
         'page callback' => 'fooaggregator_admin',
	 'access arguments' => array('administer aggregator'),
	 'title' => 'List',
	 'weight' => 1,
	 'type' => MENU_DEFAULT_LOCAL_TASK,
	 );

  $items['admin/content/fooaggregator/settings'] = array(
	 'page callback' => 'drupal_get_form',
	 'page arguments' => array('fooaggregator_admin_settings'),
	 'access arguments' => array('administer aggregator'),
	 'title' => 'Settings',
	 'type' => MENU_LOCAL_TASK,
	 'weight' => 2,
	 );

  $items['admin/content/fooaggregator/add'] = array(
         'page callback' => 'drupal_get_form',
	 'page arguments' => array('fooaggregator_admin_add'),
	 'access arguments' => array('administer aggregator'),
	 'title' => 'Add feed',
	 'type' => MENU_LOCAL_TASK,
	 'weight' => 3,
	 );

  $items['admin/content/fooaggregator/edit/%'] = array(
         'page callback' => 'drupal_get_form',
	 'page arguments' => array('fooaggregator_admin_edit', 4),
	 'access arguments' => array('administer aggregator'),
	 'title' => 'Edit feed',
	 'type' => MENU_CALLBACK,
	 );

  $items['admin/content/fooaggregator/delete/%'] = array(
	 'page callback' => 'drupal_get_form',
	 'page arguments' => array('fooaggregator_admin_delete', 4),
	 'access arguments' => array('administer aggregator'),
	 'title' => 'Delete feed',
	 'type' => MENU_CALLBACK,
	 );

  $items['admin/content/fooaggregator/clear/%'] = array(
         'page callback' => 'fooaggregator_admin_clear',
	 'page arguments' => array(4),
	 'access arguments' => array('administer aggregator'),
	 'title' => 'Clear feed items',
	 'type' => MENU_CALLBACK,
	 );

  $items['admin/content/fooaggregator/update/%'] = array(
         'page callback' => 'fooaggregator_admin_update',
	 'page arguments' => array(4),
	 'access arguments' => array('administer aggregator'),
	 'title' => 'Update feed items',
	 'type' => MENU_CALLBACK,
	 );

  return $items;
}

/**
 * Implementation of hook_node_info()
 */
function fooaggregator_node_info() {
  return array(
	       'fooaggregator' => array(
					'name' => t('RSS feed item.'),
					'base' => 'fooaggregator',
					'description' => t('RSS feed item.'),
                    'locked' => TRUE,
					)
	       );
}

/**
 * Implementation of hook_permission()
 */
function fooaggregator_permission() {
    return array('administer aggregator' => array('title' => t('Administer FooAggregator')),
                 'access aggregator' => array('title' => t('Access FooAggregator')));
}

/**
 * Implementation of hook_node_access();
 */
function fooaggregator_node_access($node, $op, $account) {
    if ($node->status == 0) {
        return NODE_ACCESS_DENY;
    }

    if ($op == 'view') {
        return user_access('access aggregator');
    }

    return NODE_ACCESS_IGNORE;
}

/**
 * Implementation of hook_form()
 */
// TODO:
function fooaggregator_form($node, $form_state) {
    return node_content_form($node, $form_state);
}

// TODO:
/**
 * Implementation of hook_form_alter()
 *
 * We check if we are adding a node (adding not editing) and display an error.
 * No one is allowed to manually add our nodes.
 */
function fooaggregator_form_alter($form_id, &$form) {
  if ($form_id == 'fooaggregator_node_form') {
    if (!$form['#node']->nid) {
      form_set_error('title', t('You are not allowed to create these nodes by hand.'));
    }
  }
}

/**
 * Implementation of hook_view()
 */
function fooaggregator_view($node, $view_mode, $lang_code = NULL) {
  $node->content['fooaggregator_author'] = array(
      '#markup' => theme('fooaggregator_author', array('node' => $node)),
      '#weight' => -1,
  );

  return $node;
}

/**
 * Implementation of hook_load()
 */
function fooaggregator_load($nodes) {
    $result = db_query('SELECT * FROM {fooaggregator} WHERE nid IN (:nids)', array(':nids' => array_keys($nodes)));
    foreach ($result as $record) {
        $nodes[$record->nid]->fooaggregator = $record;
        $nodes[$record->nid]->fooaggregator->feed = fooaggregator_feed_load($record->fid);
    }
}

/**
 * Implementation of hook_insert()
 */
function fooaggregator_insert($node) {
    db_insert('fooaggregator')
        ->fields(array(
                     'nid' => $node->nid,
                     'fid' => $node->fooaggregator->fid,
                     'guid' => $node->fooaggregator->guid,
                     'link' => $node->fooaggregator->link,
                 ))
        ->execute();
}

/**
 * Implementation of hook_update()
 */
function fooaggregator_update($node) {
    db_update('fooaggregator')
        ->fields(array(
                     'guid' => $node->fooaggregator->guid,
                     'link' => $node->fooaggregator->link,
                 ))
        ->condition('nid', $node->nid)
        ->execute();
}

/**
 * Implementation of hook_delete()
 */
function fooaggregator_delete($node) {
    db_delete('fooaggregator')
        ->condition('nid', $node->nid)
        ->execute();
}

/**
 * Implementation of hook_cron_queue_info()
 */
function fooaggregator_cron_queue_info() {
    return array(
        'fooaggregator' => array(
            'worker callback' => '_fooaggregator_cron',
            'time' => 300, // TODO: Make this configurable?
            'skip on cron' => FALSE,
        ),
    );
}

/*
 * This will refresh our feeds.
 */
function _fooaggregator_cron($queue_item_data) {
  $res;
  $limit = variable_get('fooaggregator_per_cron', 5);
  $q = db_select('fooaggregator_feed', 'f')
      ->fields('f')
      ->where('checked + refresh < :time', array(':time' => time()))
      ->orderBy('updated', 'ASC');

  if ($limit != -1) {
      $q = $q->range(0, $limit);
  }

  $res = $q->execute();

  foreach ($res as $o) {
    _fooaggregator_log_notice(t("Start to refresh blog: %title", array('%title' => $o->title)));
    fooaggregator_refresh($o);
    _fooaggregator_log_notice(t("Done to refresh blog: %title", array('%title' => $o->title)));
  }
}

/**
 * Refresh a feed.
 *
 * @param $feed the feed to refresh. 
 * @return false in case of an error otherwise true (Even if the feed doesn't have new content).
 */
function fooaggregator_refresh(&$feed) {
    $xml = "";

    if (!_fooaggregator_download($feed, $xml)) {
        // we failed to download the feed. We will just update the checked time and return.
        _fooaggregator_update_checked($feed);
        return false;
    }
    else if ($xml == '') {
        // No error but we have no new items. 
        _fooaggregator_update_feed($feed);
        return true;
    }

    $obj = _fooaggregator_parse($feed, $xml);

    $error = '';
    if (!$obj->ok($error)) {
        $message = t('Failed to parse %title, %error', array(
                         '%title' => $feed->title,
                         '%error' => $error,
                     ));
        _fooaggregator_log_error($message);
        _fooaggregator_update_checked($feed);

        $obj->__destruct();
        unset($obj);

        return false;
    }

    _fooaggregator_update($obj);

    $obj->__destruct();

    unset($xml);
    unset($obj);

    return true;
}

/**
 * update the checked time of a feed.
 *
 * @param $feed a feed object
 */
function _fooaggregator_update_checked(&$feed) {
    db_update('fooaggregator_feed')
        ->fields(array(
                     'checked' => $feed->checked,
                 ))
        ->condition('fid', $feed->fid)
        ->execute();
}

/**
 * Download a feed logging any problems via the drupal watchdog system.
 * This is based on the core aggregator module.
 *
 * @param $feed a feed object.
 * @param $xml where to put the contents of the feed.
 * @return false if we have an error and it will be logged otherwise true even if the feed has no new content.
 */
function _fooaggregator_download(&$feed, &$xml) {
    $headers = array();

    if ($feed->etag) {
        $headers['If-None-Match'] = $feed->etag;
    }

    if ($feed->modified) {
        $headers['If-Modified-Since'] = gmdate('D, d M Y H:i:s', $feed->modified) .' GMT';
    }

    $result = drupal_http_request($feed->url, $headers);

    switch ($result->code) {
    case 304:
        _fooaggregator_log_notice(t('No new content for %url', array('%url' => $feed->url)));
        $feed->checked = time();
        break;

    case 301:
        _fooaggregator_log_warning(t('Updated URL for feed from %old to %new', array(
										 '%old' => $feed->url,
										 '%new' => $result->redirect_url,
                                     )));
        $feed->url = $result->redirect_url; 

    case 200:
    case 302:
    case 307:
        $feed->checked = time();
        if (($result->headers['Content-Length']) && ($result->headers['Content-Length'] == 0)) {
            break;
        }

        if ($result->data == '') {
            break;
        }

        $feed->updated = $feed->checked;
        $xml = $result->data;
        break;
    default:
        _fooaggregator_log_error(t('HTTP error %number - "%error" while getting %url', array(
                                       '%number' => $result->code,
                                       '%error' => $result->error,
                                       '%url' => $feed->url,
                                   )));
        $feed->checked = time();
        return false;
    }

    // update etag and modified
    if ($result->headers['Last-Modified']) {
        $feed->modified = strtotime($result->headers['Last-Modified']);
    }

    $feed->etag = $result->headers['ETag'];

    return true;
}

/**
 * log a warning via watchdog
 *
 * @param $error a string to log
 */
function _fooaggregator_log_warning($error) {
  watchdog('fooaggregator', $error, NULL, WATCHDOG_WARNING);
}

/**
 * log an error via watchdog
 *
 * @param $error a string to log
 */
function _fooaggregator_log_error($error) {
  watchdog('fooaggregator', $error, NULL, WATCHDOG_ERROR);
}

/**
 * log a notice via watchdog
 *
 * @param $error a string to log
 */
function _fooaggregator_log_notice($error) {
  watchdog('fooaggregator', $error, NULL, WATCHDOG_NOTICE);
}

/**
 * parse an XML feed.
 *
 * @param $feed a feed object
 * @param $string the XML string to parse
 * @return a FooFeed object
 */
function _fooaggregator_parse(&$feed, &$string) {
    require_once 'foofeed.inc';

    $obj =& new FooFeed($feed, $string);
    return $obj;
}

/**
 * Update a feed from a FooFeed object.
 *
 * @param $feed a FooFeed object
 */
function _fooaggregator_update(&$feed) {
  _fooaggregator_update_feed($feed);
  _fooaggregator_update_nodes($feed);
}

/**
 * Update the feed information in the database.
 *
 * @param $feed a FooFeed object.
 */
function _fooaggregator_update_feed(&$feed) {
    db_update('fooaggregator_feed')
        ->fields(array(
                     'link' => $feed->link,
                     'etag' => $feed->etag,
                     'checked' => $feed->checked,
                     'updated' => $feed->updated,
                     'modified' => $feed->modified,
                     'description' => $feed->description,
                     'image_title' => $feed->image_title,
                     'image_link' => $feed->image_link,
                     'image_url' => $feed->image_url,
                 ))
        ->condition('fid', $feed->fid)
        ->execute();
}

/**
 * Check the feed and see if we have new or updated items.
 * Create new nodes or update old ones if needed.
 * It will also log the number of new, updated and non-changed nodes.
 *
 * @param $feed a FooFeed object.
 */
function _fooaggregator_update_nodes(&$feed) {
  $a = 0; // added
  $u = 0; // updated
  $n = 0; // not changed.

  foreach ($feed->items as $id => $item) {
      // TODO: is there a way not to overload the database ?
      $nid = _fooaggregator_guid_exists($item['guid'], $feed->fid);
      if (!$nid) {
          _fooaggregator_create_node($item, $feed->fid);
          ++$a;
      }
      else {
          if (_fooaggregator_update_node($item, $nid)) {
              ++$u;
          }
          else {
              ++$n;
          }
      }
  }

  _fooaggregator_log_notice(t('Updated feed %url. %a added. %u updated. %n not changed.', array('%url' => $feed->url, '%a' => $a, '%u' => $u, '%n' => $n)));
}

/**
 * Update a node if needed.
 *
 * @param $item a FooFeed item array
 * @param $nid the node ID to update its node.
 * @return true if we updated it otherwise false.
 */
function _fooaggregator_update_node(&$item, $nid) {
  // update only if changed.
  $node = node_load($nid);
  if ($item['time'] > $node->changed) {
    $node->changed = $item['time'];
    $node->fooaggregator = $item;
    // TODO: do we need to call node_submit() ?
    node_save($node);
    return true;
  }
  return false;
}

/**
 * Check the existance of a guid for a feed item.
 *
 * @param $guid the guid to check for
 * @param $fid the feed id
 * @return the node ID or 0 if nothing exists.
 */
function _fooaggregator_guid_exists($guid, $fid) {
    // TODO: limit is not portable?
    $res = db_query("select nid from {fooaggregator} where fid=:fid and guid=:guid limit 1", array(':fid' => $fid, ':guid' => $guid))->fetchObject();

    return is_object($res) ? $res->nid : 0;
}

/**
 * Create a new node for a feed item.
 *
 * @param $item the FooFeed item
 * @param $fid the ID of the feed.
 */
function _fooaggregator_create_node($item, $fid) {
  $node = new stdClass;
  $node->type = 'fooaggregator';
  $node->title = $item['title'];
  $node->body = $item['description'];
  $node_options = variable_get('node_options_'. $node->type, array('status', 'promote'));
  $node->status = in_array('status', $node_options);
  $node->promote = in_array('promote', $node_options);
  if (module_exists('comment')) {
    $node->comment = variable_get("comment_$node->type", COMMENT_NODE_DISABLED);
  }
  if (module_exists('taxonomy')) {
    $node->taxonomy = $taxonomy;
  }

  $node->created = $item['time'];
  $node->changed = $item['time'];
  $node->fooaggregator = (object)$item;
  $node->fooaggregator->fid = $fid;

  $node = node_submit($node);

  $node->uid = variable_get('fooaggregator_uid', 1);
  $node->created = $item['time'];
  $node->changed = $item['time'];
  $node->format = variable_get('fooaggregator_filter', 1);
  node_save($node);
}

/**
 * This is the main admin page.
 * This is based on the core aggregator module
 */
function fooaggregator_admin() {
  $counts = array();
  $result = db_query("select fid, COUNT(nid) as count from {fooaggregator} group by fid");

  foreach ($result as $record) {
      $counts[$record->fid] = $record->count;
  }

  $rows = array();

  $total = 0;
  $needs_updating = 0;

  $result = db_query("select * from {fooaggregator_feed}");

  foreach ($result as $record) {
    ++$total;

    $row = array();
    $row[] = l($record->title, 'fooaggregator/source/'.$record->fid);
    $row[] = format_plural($counts[$record->fid] ? $counts[$record->fid] : 0, '1 item', '@count items');
    $row[] = $record->checked ? t('@time ago', array('@time' => format_interval(time() - $record->checked))) : t('never');
    $row[] = $record->updated ? t('@time ago', array('@time' => format_interval(time() - $record->updated))) : t('never');
    $row[] = ($record->checked ? t('%time left', array('%time' => format_interval($record->checked + $record->refresh - time()))) : t('never'));

    $row[] = l(t('edit'), 'admin/content/fooaggregator/edit/'.$record->fid);
    $row[] = l(t('delete'), 'admin/content/fooaggregator/delete/'.$record->fid);
    $row[] = l(t('update items'), 'admin/content/fooaggregator/update/'.$record->fid);
    $row[] = l(t('delete items'), 'admin/content/fooaggregator/clear/'.$record->fid);
    if (time() - $record->checked > $record->refresh) {
        $rows[] = array('class' => array('error'), 'data' => $row);
      ++$needs_updating;
    }
    else {
        $rows[] = array('data' => $row);
    }
  }

  drupal_set_message(t('Total: %total. Needs updating: %needs_updating', array('%total' => $total, '%needs_updating' => $needs_updating)));

  $header = array(t('Title'), t('Items'), t('Last check'), t('Last update'), t('Next update'), array('data' => t('Operations'), 'colspan' => 4));

  return theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array()));
}

/**
 * This is the settings page.
 */
function fooaggregator_admin_settings() {
  $form = array();
  $form['fooaggregator_per_cron'] = array(
					  '#title' => t('Number of feeds to update per cron run'),
					  '#type' => 'textfield',
					  '#description' => t('-1 for all. 0 to disable the cron refresh. Decrease this if you get out of memory problems.'),
					  '#default_value' => variable_get('fooaggregator_per_cron', 5),
					  );

  $users = array();

  $res = db_query("select uid, name from {users}");
  foreach ($res as $o) {
    $users[$o->uid] = $o->name;
  }
  $users[0] = variable_get('anonymous', t('Anonymous'));

  $form['fooaggregator_uid'] = array(
				     '#title' => t('Owner of the nodes created'),
				     '#type' => 'select',
				     '#options' => $users,
				     '#default_value' => variable_get('fooaggregator_uid', 1),
				     );

  $form['fooaggregator_per_page'] = array(
					  '#title' => t('Number of nodes per page'),
					  '#type' => 'select',
					  '#options' => drupal_map_assoc(array(20, 25, 30, 35, 40, 45, 50)),
					  '#default_value' => variable_get('fooaggregator_per_page', 25),
					  );

  $formats = filter_formats();
  $filters = array();
  foreach ($formats as $format) {
    $filters[$format->format] = check_plain($format->name);
  }
  $form['fooaggregator_filter'] = array(
					'#title' => t('Default input format'),
					'#type' => 'select',
					'#options' => $filters,
					'#default_value' => variable_get('fooaggregator_filter', 1),
					);

  return system_settings_form($form);
}

/**
 * Displays the feed add form.
 */
function fooaggregator_admin_add($form, &$form_state) {
    return _fooaggregator_admin_form($form, 0);
}

/**
 * Displays the feed edit form.
 */
function fooaggregator_admin_edit($form, &$form_state, $fid) {
    return _fooaggregator_admin_form($form, $fid);
}

/**
 * Creates the actual form add/edit field.
 *
 * @param $fid a feed ID or 0 if we want a form to add not edit.
 * @return the form.
 */
function _fooaggregator_admin_form($form, $fid) {
    $feed = (object)array('refresh' => '7200', 'visible' => 1);

    if ($fid) {
        $feed = db_query('select * from {fooaggregator_feed} where fid=:fid', array(':fid' => $fid))->fetchObject();
    }

    $form['title'] = array(
        '#title' => t('Title'),
        '#type' => 'textfield',
        '#required' => TRUE,
        '#default_value' => $feed->title,
    );
    $form['url'] = array(
        '#title' => t('URL'),
        '#type' => 'textfield',
        '#required' => TRUE,
        '#default_value' => $feed->url,
    );
    $form['refresh'] = array(
        '#title' => t('Update interval'),
        '#type' => 'select',
        '#options' => drupal_map_assoc(array(900, 1800, 3600, 7200, 10800, 21600, 32400, 43200, 64800, 86400, 172800, 259200, 604800, 1209600, 2419200), 'format_interval'),
        '#default_value' => $feed->refresh,
    );

    $form['visible'] = array(
        '#title' => t('Visible in the main aggregator page.'),
        '#type' => 'checkbox',
        '#default_value' => $feed->visible,
        '#description' => t('This setting determines the visibility of this feed in the <a href="@page_url">news aggregator</a>', array('@page_url' => url('fooaggregator'))),
    );

    $form['save'] = array(
        '#type' => 'submit',
        '#value' => t('Save')
    );
    if ($fid) {
        $form['fid'] = array('#type' => 'hidden', '#value' => $fid);
    }

    return $form;
}

/**
 * Implementation of hook_form_validate() for the edit form.
 * if we are editing, make sure the user can't change the URL to an existing one.
 */
function fooaggregator_admin_edit_validate($form, &$form_state) {
  // flag an error if the URL is a duplicate.

  $fid = $form_state['values']['fid'];
  $url = $form_state['values']['url'];
  $count = 0;
  $q = db_query("select fid from {fooaggregator_feed} where url = :url and fid != :fid",
                array(':url' => $url, ':fid' => $fid));
  foreach ($q as $o) {
    $count++;
  }

  if ($count > 0) {
    form_set_error('url', t('this URL has been used already'));
  }
}

/**
 * Implementation of hook_form_validate() for the add form.
 * if we are adding, make sure the URL is not a duplicate.
 */
function fooaggregator_admin_add_validate($form, &$form_state) {
  // flag an error if the URL is a duplicate.

  $url = $form_state['values']['url'];
  $count = 0;
  $q = db_query("select fid from {fooaggregator_feed} where url = :url", array(':url' => $form_state['values']['url']));

  foreach ($q as $o) {
    $count++;
  }

  if ($count > 0) {
    form_set_error('url', t('this URL has been used already'));
  }
}

/**
 * Implementation of hook_form_submit() for the add form.
 * This does the actual work of adding a new feed.
 */
function fooaggregator_admin_add_submit($form, &$form_state) {
    db_insert('fooaggregator_feed')
        ->fields(array(
                     'title' => $form_state['values']['title'],
                     'url' => $form_state['values']['url'],
                     'refresh' => $form_state['values']['refresh'],
                     'visible' => $form_state['values']['visible'],
                     'checked' => 0, // TODO: This is needed for upgrades only
                     'updated' => 0,
                     'modified' => 0,
                 ))
        ->execute();

  $message = t('Added feed %title', array('%title' => $form_state['values']['title']));
  drupal_set_message($message);
  _fooaggregator_log_notice($message);
}

/**
 * Implementation of hook_form_submit() for the edit form.
 * This does the actual work of updating a feed.
 */
function fooaggregator_admin_edit_submit($form, &$form_state) {
    db_update('fooaggregator_feed')
        ->fields(array(
                     'title' => $form_state['values']['title'],
                     'url' =>  $form_state['values']['url'],
                     'refresh' =>  $form_state['values']['refresh'],
                     'visible' =>  $form_state['values']['visible'],
                 ))
        ->condition('fid', $form_state['values']['fid'])
        ->execute();

  $message = t('Updated feed %title', array('%title' => $form_state['values']['title']));
  drupal_set_message($message);
  _fooaggregator_log_notice($message);

  $form_state['redirect'] = 'admin/content/fooaggregator';
}

/**
 * delete a feed.
 *
 * @param $fid a feed ID
 */
function fooaggregator_admin_delete($form, &$form_state, $fid) {
    // TODO: what if the cron is running and it updated the feed after we deleted it ?
    $feed = db_query("select * from {fooaggregator_feed} where fid=:fid",
                     array(':fid' => $fid))->fetchObject();
    if ($feed) {
        $form['fid'] = array('#type' => 'hidden', '#value' => $fid);
        return confirm_form($form, t('Are you sure you want to delete the feed "%title" ?', array('%title' => $feed->title)), 'admin/content/fooaggregator', NULL, t('Delete'));
    }
    else {
        drupal_set_message(t('The feed id %id doesn\'t exist.', array('%id' => $fid)), 'error');
        drupal_goto('admin/content/fooaggregator');
    }
}

/**
 * Implementation of hook_form_submit() for the delete form.
 * this function will delete the actual feed and items.
 */
function fooaggregator_admin_delete_submit($form, &$form_state) {
    // TODO: what if the cron is running and it updated the feed after we deleted it ?
    // TODO: what if some users marked some items as favorites ?

    if (($form_state['values']['confirm']) && user_access('administer aggregator')) {
        $feed = db_query("select * from {fooaggregator_feed} where fid=:fid", array('fid' => $form_state['values']['fid']))->fetchObject();
        $nids = _fooaggregator_admin_clear($feed);
        db_delete('fooaggregator_feed')
            ->condition('fid', $form_state['values']['fid'])
            ->execute();

        $message = t('Deleted feed %title', array('%title' => $feed->title));
        drupal_set_message($message);
        _fooaggregator_log_notice($message);

        module_invoke_all('fooaggregatorapi', 'wipe_feed', $form['fid'], $nids);
    }

    $form_state['redirect'] = 'admin/content/fooaggregator';
}

/**
 * A menu callback.
 * Clear a feed items given a feed ID
 * This function will also redirect to the admin page.
 *
 * @param $fid a feed ID
 */
function fooaggregator_admin_clear($fid) {
  $feed = fooaggregator_feed_load($fid);
  _fooaggregator_admin_clear($feed);
  drupal_goto('admin/content/fooaggregator');
}

/**
 * Clear a feed items
 *
 * @param $feed a feed object.
 * @return an array of the node ids deleted.
 */
function _fooaggregator_admin_clear(&$feed) {
    // TODO: catch the exception and return a bool?
    $nids = array();
    $count = 0;
    if (user_access('administer aggregator')) {
        $res = db_query("select nid from {fooaggregator} where fid=:fid", array(':fid' => $feed->fid));
        foreach ($res as $o) {
            $nids[$o->nid] = $o->nid;
            $count++;
        }

        node_delete_multiple($nids);

        $message = t('Deleted %items from feed %title', array(
                         '%items' => format_plural($count, '1 item', '@count items'),
                         '%title' => $feed->title,
                     ));
        drupal_set_message($message);
        _fooaggregator_log_notice($message);

        $feed->checked = 0;
        $feed->updated = 0;
        $feed->modified = 0;
        $feed->etag = '';
        _fooaggregator_update_feed($feed);
        return $nids;
    }
}

/**
 * Refresh a feed.
 *
 * @param $fid a feed ID
 */
function fooaggregator_admin_update($fid) {
    $message = "";
    $feed = fooaggregator_feed_load($fid);

    if (fooaggregator_refresh($feed)) {
        $message = t('Updated items for feed %title', array('%title' => $feed->title));
    }
    else {
        $message = t('Failed to update items for feed %title', array('%title' => $feed->title));
    }
    drupal_set_message($message);
    _fooaggregator_log_notice($message);
    drupal_goto('admin/content/fooaggregator');
}

/**
 * theme the author part of the feed item.
 */
function theme_fooaggregator_author($variables) {
    $node = $variables['node'];
    return l($node->fooaggregator->feed->title, 'fooaggregator/source/'.$node->fooaggregator->feed->fid).' - '.format_date($node->created).'<br />';
}
// TODO:
/**
 * theme the feed information part.
 *
 * @param $feed a feed object
 * @return an HTML string representing the themed feed information.
 */
function theme_fooaggregator_feed($feed) {
  $output .= theme('fooaggregator_feed_image', $feed);
  $output .= l(check_plain($feed->title), check_plain($feed->link)).'<br />';
  $output .= t('Checked: %time ago<br />', array('%time' => format_interval(time()-$feed->checked)));
  $output .= t('Updated: %time ago<br />', array('%time' => format_interval(time()-$feed->updated)));
  $output .= t('Update every: %time<br />', array('%time' => format_interval($feed->refresh)));
  $output .= '<br />'.filter_xss($feed->description).'<br />';

  $feeds = drupal_add_feed($feed->url, $feed->title);
  $output .= $feeds[$feed->url];
  return theme('box', '', $output);
}
// TODO:
function theme_fooaggregator_feed_image($feed) {
  if (($feed->image_link != '') && ($feed->image_url != '') && ($feed->image_title != '')) {
    $image = theme('image', url($feed->image_url), $feed->image_title, $feed->image_title, NULL, false);
    return '<div style="float: right;">'.l($image, url($feed->image_link), array('absolute' => TRUE, 'html' => TRUE, 'attributes' => array('target' => 'new'))).'</div>';
  }
}

/**
 * load a feed from the database
 *
 * @param $fid a feed ID
 * @param $to_arr whether to return it as an object or as an array
 * @return a feed object or array.
 */
function fooaggregator_feed_load($fid) {
  static $feeds = array();

  if (!in_array($fid, $feeds)) {
      $result = db_query("select * from {fooaggregator_feed} where fid=:fid", array(':fid' => $fid));
      $feeds[$fid] = $result->fetchObject();
  }

  return $feeds[$fid];
}

/**
 * Implements hook_node_view().
 */
function fooaggregator_node_view($node, $view_mode, $langcode) {
    if ($view_mode != 'rss' && $node->type == 'fooaggregator') {
        $links['fooaggregator'] = array(
            'title' => t('view original'),
            'href' => $node->fooaggregator->link,
        );

        $node->content['links']['fooaggregator'] = array(
            '#links' => $links,
        );
    }
}

/**
 * Implementation of hook_theme()
 */
function fooaggregator_theme() {
  return array(
	       'fooaggregator_author' => array('variables' => array('feed' => NULL)),
	       'fooaggregator_feed' => array('variables' => array('feed' => NULL)),
	       'fooaggregator_feed_image' => array('variables' => array('feed' => NULL)),
	       );
}
// TODO:
/**
 * Implementation of hook_views_api().
 */
function fooaggregator_views_api() {
  return array(
    'api' => 2.0
    );
}

?>
